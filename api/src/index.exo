import "rsvp"
import "subscription"
import "payment"
import "expiry"
import "notification"
import "authentication"

context AuthContext {
  @jwt("sub") clerkId: String?
  @jwt role: String
  @jwt email: String
  @jwt firstName: String
  @jwt lastName: String
}

context AuthUserContext {
  @query("getAuthUserId") authUserId: Uuid
}

@postgres
module Concertmodule {
  @access(query=self.publish || AuthContext.role == "admin", mutation=AuthContext.role == "admin")
  type Concert {
    @pk id: Uuid = generate_uuid()
    title: String
    description: String
    memberPrice: Int
    nonMemberPrice: Int
    venue: Venue
    ticketLink: String?
    photoUrl: String
    startTime: LocalDateTime
    endTime: LocalDateTime
    publish: Boolean
    rsvps: Set<Rsvp>?
    notifications: Set<Notification>?
    concertArtists: Set<ConcertArtist>
  }

  @access(query=self.publish || AuthContext.role == "admin", mutation=AuthContext.role == "admin")
  type Venue {
    @pk id: Uuid = generate_uuid()
    name: String
    street: String
    city: String
    state: String
    zip: String
    concerts: Set<Concert>?
    publish: Boolean
  }

  @access(query=self.publish || AuthContext.role == "admin", mutation=AuthContext.role == "admin")
  type Artist {
    @pk id: Uuid = generate_uuid()
    title: String?
    name: String
    bio: String?
    photoUrl: String?
    youtubeVideoIds: Array<String>?
    instruments: Array<String>
    publish: Boolean
    artistConcerts: Set<ConcertArtist>?
  }

  @access(query=true, mutation=AuthContext.role == "admin")
  type ConcertArtist {
    @pk id: Uuid = generate_uuid()
    concert: Concert
    artist: Artist
    isMain: Boolean
    rank: Int
    instrument: String
  }

  @access(AuthContext.role == "admin")
  type Subscription {
    @pk id: Uuid = generate_uuid()
    email: String
    group: String
  }

  @access(query=AuthContext.role == "admin" || self.authUser.id == AuthUserContext.authUserId, 
          mutation=AuthContext.role == "admin" || self.authUser.id == AuthUserContext.authUserId,
          delete=AuthContext.role == "admin")
  type Membership {
    @pk id: Uuid = generate_uuid()
    authUser: AuthUser
    spouseFirstName: String?
    spouseLastName: String?
    spouseEmail: String?
    
    @access(query=true, mutation=AuthContext.role == "admin")
    expiry: LocalDate?

    @access(query=true, mutation=AuthContext.role == "admin", create=true)
    type: String
    payments: Set<Payment>?
  }

  @access(AuthContext.role == "admin")
  type Rsvp {
    @pk id: Uuid = generate_uuid()
    @unique("concert_email") email: String
    @unique("concert_email") concert: Concert
    numTickets: Int
  }

  @access(AuthContext.role == "admin")
  type Notification {
    @pk id: Uuid = generate_uuid()
    concert: Concert?
    subject: String
    message: String
    postMessage: String
  }

  @access(query=true, mutation=AuthContext.role == "admin")
  @plural("advisories")
  type Advisory {
    @pk id: Uuid = generate_uuid()
    level: String
    message: String
  }

  @access(query=self.clerkId == AuthContext.clerkId || AuthContext.role == "admin", mutation=AuthContext.role == "admin")
  type AuthUser {
    @pk id: Uuid = generate_uuid()
    @unique clerkId: String?
    @unique email: String?
    firstName: String?
    lastName: String?
    membership: Membership?
  }

  @access(query=AuthContext.role == "admin", create=AuthContext.role == "admin", delete=false, update=false)
  type Payment {
    @pk id: Uuid = generate_uuid()
    membership: Membership
    date: LocalDate
    note: String
    infoOnly: Boolean = false
  }
}